<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="kr.co.wheelingcamp.board.mapper.BoardMapper">

		<select id="getListCount" resultType="_int">
				SELECT COUNT(*) FROM "BOARD"
				WHERE BOARD_DEL_FL = 'N'
		</select>
		
		<select id="getListMyBoard" resultType="_int">
				SELECT COUNT(*) FROM "BOARD"
				JOIN "MEMBER" USING(MEMBER_NO)
				WHERE BOARD_DEL_FL = 'N' AND MEMBER_ID = #{memberId}
		</select>
		
		<select id="getCommentCount" resultType="_int">
		         SELECT COUNT(*) FROM "COMMENT" C
				JOIN "MEMBER" A ON C.MEMBER_NO  = A.MEMBER_NO
				JOIN "BOARD" B USING(BOARD_NO)
				WHERE COMMENT_DEL_FL = 'N' AND A.MEMBER_NO = ${memberNo} AND BOARD_DEL_FL = 'N'
		
		 </select>
      
       
        <select id="selectBoardList">
        	
        	  SELECT ROWNUM, BOARD_NO, BOARD_TITLE, MEMBER_NICK_NAME, TO_CHAR(BOARD_WRITE_DATE, 'YYYY"."MM"."DD') BOARD_WRITE_DATE,
        	   READ_COUNT , 
   
		      (SELECT COUNT(*) 
		      FROM "COMMENT" C
		      WHERE B.BOARD_NO = C.BOARD_NO AND COMMENT_DEL_FL = 'N') COMMENT_COUNT,
		      
		      (SELECT COUNT(*) 
		      FROM BOARD_LIKE L
		      WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
      
         <![CDATA[
         CASE 
            WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60  -- 조건  1/24 = 한 시간
            THEN FLOOR((SYSDATE-BOARD_WRITE_DATE) * 24 * 60 * 60 ) || '초 전'
            
            WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24  
            THEN FLOOR((SYSDATE-BOARD_WRITE_DATE) * 24 * 60) || '분 전'
            
            WHEN SYSDATE - BOARD_WRITE_DATE < 1 
            THEN FLOOR((SYSDATE-BOARD_WRITE_DATE) * 24) || '시간 전'
            
            ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
            
         END BOARD_WRITE_DATE
         ]]>
      
      FROM (SELECT BOARD_NO, BOARD_WRITE_DATE, ITEM_NO, MEMBER_NO, READ_COUNT, BOARD_TITLE, BOARD_CONTENT, BOARD_DEL_FL, LIKE_COUNT, BOARD_UPDATE_DATE
	FROM BOARD WHERE BOARD_DEL_FL = 'N' ORDER BY BOARD_NO) B
      JOIN "MEMBER" USING(MEMBER_NO)
      WHERE BOARD_DEL_FL = 'N'
      ORDER BY ROWNUM DESC
        	
        		
        </select>
        
       
       <select id="selectOne" resultMap="board_rm">
       			SELECT BOARD_NO, BOARD_TITLE, BOARD_CONTENT,READ_COUNT,
     			 MEMBER_NO, MEMBER_NICK_NAME, PROFILE_IMG,
      			TO_CHAR(BOARD_WRITE_DATE, 'YYYY "-" MM "-" DD') BOARD_WRITE_DATE, 
     			 TO_CHAR(BOARD_UPDATE_DATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') BOARD_UPDATE_DATE,
   
     			 (SELECT IMG_PATH || IMG_RENAME
      			 FROM "BOARD_IMG"
      			 WHERE BOARD_NO = ${boardNo}
      			 AND IMG_ORDER = #{imgOrder}) THUMBNAIL,
      		
      				
      				(SELECT COUNT(*)
      			    FROM "BOARD_LIKE"
        			  WHERE BOARD_NO = #{boardNo}) LIKE_COUNT,  
        			  
        			   (SELECT COUNT(*) FROM BOARD_LIKE
       				    WHERE MEMBER_NO = #{memberNo}
        			   AND BOARD_NO = #{boardNo}) LIKE_CHECK,
        			   
        			    
      (SELECT COUNT(*) 
      FROM "COMMENT"
      WHERE BOARD_NO = #{boardNo} AND COMMENT_DEL_FL ='N') COMMENT_COUNT
 
      			FROM "BOARD"
      			JOIN "MEMBER" USING(MEMBER_NO)
    			  WHERE BOARD_DEL_FL = 'N'
     			 AND BOARD_NO = ${boardNo}
       </select>
       
       
       <resultMap type="Board" id="board_rm">
   
      <!-- id 태그 : PK 역할을 하는 컬럼, 필드를 작성하는 태그 -->
      <id property="boardNo" column="BOARD_NO"/>
      
      
      <!-- collection 태그
         select로 조회된 결과를 컬렉션(List)에 담아
         지정된 필드에 세팅
         
         property : List를 담을 DTO의 필드명
         select : 실행할 select의 id
         column : 조회 결과 중 지정된 컬럼의 값을 파라미터로 전달
         javaType : List(컬렉션)의 타입을 지정 
         ofType : List(컬렉션)의 제네릭(타입 제한) 지정
      -->
      
      <!-- 해당 게시글 이미지 목록 조회 후 필드에 저장 -->
      <collection 
         property="imgList"
         select="selectImageList"
         column="BOARD_NO"   
         javaType="java.util.ArrayList"
         ofType="BoardImage"
      />
      
      <!-- column : 선행된 select에서 조회한 BOARD_NO
               select문에서 먼저 조회된 후 DTO에 세팅된 것을 가져다 쓰기 때문에 뒤 Select문에서 사용할 때
               #{boardNo} (자바 표기법)을 사용한다
               
         property: selectImageList에서 가져온 결과를 담을 DTO 필드명 -->
      
      
      <!-- 해당 게시글 댓글 목록 조회 후 필드에 저장 -->
      <collection 
      property="commentList"
      select="selectCommentList"
      column="BOARD_NO"
      javaType="java.util.ArrayList"
      ofType="Comment"
      />
      
      
   </resultMap>
   
   <select id="selectImageList" resultType="BoardImage">
SELECT *
FROM "BOARD_IMG"
WHERE BOARD_NO = #{boardNo}
ORDER BY IMG_ORDER
</select>

<select id="selectCommentList" resultType="Comment">
   SELECT LEVEL, C.* FROM
(SELECT COMMENT_NO, COMMENT_CONTENT,
       TO_CHAR(COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일"') COMMENT_WRITE_DATE,
       BOARD_NO, MEMBER_NO, MEMBER_NICK_NAME, COMMENT_NO2, COMMENT_DEL_FL,PROFILE_IMG
   FROM "COMMENT"
   JOIN MEMBER USING(MEMBER_NO)
   WHERE BOARD_NO = ${boardNo}) C
WHERE COMMENT_DEL_FL = 'N'
OR 0 != (SELECT COUNT(*) FROM "COMMENT" SUB
            WHERE SUB.COMMENT_NO2 = C.COMMENT_NO
            AND COMMENT_DEL_FL = 'N')
START WITH COMMENT_NO2 IS NULL

CONNECT BY PRIOR COMMENT_NO = COMMENT_NO2
ORDER SIBLINGS BY COMMENT_NO
</select>
       
       
       
    		 	 <update id="updateReadCount">
       				UPDATE "BOARD" SET
					READ_COUNT = READ_COUNT + 1
					WHERE BOARD_NO = #{boardNo}
    		   </update>
       
     		  <select id="selectReadCount" resultType="_int">
    	 			SELECT READ_COUNT
 					FROM "BOARD"
 					WHERE BOARD_NO = #{boardNo}
     		  </select>
      
      
      <!-- 게시글 작성 -->
      <insert id="boardWrite">
      	
      	<selectKey order="BEFORE" resultType="_int" keyProperty="boardNo">
			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
		</selectKey>
      	
      	INSERT INTO "BOARD"
      	VALUES(#{boardNo}, DEFAULT, 1, #{memberNo}, DEFAULT, #{boardTitle}, #{boardContent},
      			 DEFAULT, DEFAULT, DEFAULT)
    	
      
      </insert>
      
      <!-- 이미지 등록하기 -->
      	<insert id="insertUploadImgList" parameterType="list">
		
			INSERT INTO "BOARD_IMG"
			
			<foreach collection="list" item="img"
				open="(" close=")" separator="UNION">
				SELECT NEXT_BOARD_IMG_NO(),
				#{img.imgPath}, 
				#{img.imgOriginalName}, 
				#{img.imgRename}, 
				#{img.imgOrder}, 
				#{img.boardNo}
				FROM DUAL
			</foreach>	
		</insert>
      
<!-- 좋아요 해제 -->
   <delete id="deleteBoardLike">
      DELETE FROM BOARD_LIKE
      WHERE MEMBER_NO = #{memberNo}
      AND BOARD_NO = #{boardNo}
   </delete>
   
   
   <!-- 좋아요 체크 -->
   <insert id="insertBoardLike">
      INSERT INTO BOARD_LIKE(MEMBER_NO, BOARD_NO)
      VALUES(#{memberNo},#{boardNo})
   </insert>


   <!-- 게시글 좋아요 수 조회 -->
   <select id="selectLikeCount">
      SELECT COUNT(*) FROM BOARD_LIKE
      WHERE BOARD_NO = #{boardNo}
   </select>    <!-- temp가 아니라 그대로 boardNo로 써주면 된다 -->
   
   
   
 <select id="getSearchCount">
  SELECT COUNT(*)
  FROM "BOARD"

  <!-- 작성자 검색인 경우 -->
  <if test='key == "w"'>
    JOIN "MEMBER" USING(MEMBER_NO)
  </if>

  WHERE BOARD_DEL_FL ='N'

  <choose>
    <!-- 제목 검색인 경우 key = "t" -->
    <when test='key == "t"'>
      AND BOARD_TITLE LIKE '%' || #{query} || '%'
    </when>
    <when test='key == "c"'>
      AND BOARD_CONTENT LIKE '%' || #{query} || '%'
    </when>
    <when test='key == "tc"'>
      AND (
        BOARD_CONTENT LIKE '%' || #{query} || '%'
        OR 
        BOARD_TITLE LIKE '%' || #{query} || '%'
      )
    </when>
    <!-- 작성자 검색 -->
    <otherwise>
      AND MEMBER_NICK_NAME LIKE '%' || #{query} || '%'
    </otherwise>
  </choose>
</select>
   
   
   <!--  검색 결과 목록 조회  -->
 <select id="selectSearchList">
 
 	SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICK_NAME, TO_CHAR(BOARD_WRITE_DATE, 'YYYY"."MM"."DD') BOARD_WRITE_DATE,
        	   READ_COUNT , 
		(SELECT COUNT(*) 
		FROM "COMMENT" C
		WHERE C.BOARD_NO = B.BOARD_NO ) COMMENT_COUNT,

		(SELECT COUNT(*)
 			FROM "BOARD_LIKE" L 
 				WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
 
 <![CDATA[
 CASE 
	  WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60
	  THEN FLOOR((SYSDATE - BOARD_WRITE_DATE)  * 24 * 60 * 60) || '초 전'
	  
	  WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24
	  THEN FLOOR((SYSDATE - BOARD_WRITE_DATE)  * 24 * 60) || '분 전'
	  
	  WHEN SYSDATE - BOARD_WRITE_DATE < 1
	  THEN FLOOR(SYSDATE - BOARD_WRITE_DATE)  * 24  || '시간 전'
	  
	  ELSE TO_CHAR(BOARD_WRITE_DATE , 'YYYY-MM-DD')
	 END BOARD_WRITE_DATE 
	 ]]>

		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_DEL_FL = 'N'
		
		
		<choose>
 <!--  제목 검색인 경우 key = "t" -->
 		
 		<when test='key=="t"'>
 			AND BOARD_TITLE LIKE '%' || #{query} || '%'
 		</when>
 		
 		<when test='key=="c"'>
			AND BOARD_CONTENT LIKE '%' || #{query} || '%' 		
 		</when>
 		
 		<when test='key=="tc"'>
			AND (
				BOARD_CONTENT LIKE '%' || #{query} || '%'
				 OR 
			 	BOARD_TITLE LIKE '%' || #{query} || '%'		
			) 
 		</when>
 		<!--  작성자 검색 -->
 	
 		
 		<when test='key== "w"'>
 			AND MEMBER_NICK_NAME LIKE '%' || #{query} || '%'
 		</when>
 
 </choose>
		
		ORDER BY BOARD_NO DESC
 
 </select>
 
 <select id="getMyPosts">
 
 		SELECT ROWNUM, BOARD_NO, BOARD_TITLE, MEMBER_NICK_NAME, TO_CHAR(BOARD_WRITE_DATE, 'YYYY"."MM"."DD') BOARD_WRITE_DATE,
        	   READ_COUNT , 
   
		      (SELECT COUNT(*) 
		      FROM "COMMENT" C
		      WHERE B.BOARD_NO = C.BOARD_NO AND COMMENT_DEL_FL = 'N') COMMENT_COUNT,
		      
		      (SELECT COUNT(*) 
		      FROM BOARD_LIKE L
		      WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
      
         <![CDATA[
         CASE 
            WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24 / 60  -- 조건  1/24 = 한 시간
            THEN FLOOR((SYSDATE-BOARD_WRITE_DATE) * 24 * 60 * 60 ) || '초 전'
            
            WHEN SYSDATE - BOARD_WRITE_DATE < 1 / 24  
            THEN FLOOR((SYSDATE-BOARD_WRITE_DATE) * 24 * 60) || '분 전'
            
            WHEN SYSDATE - BOARD_WRITE_DATE < 1 
            THEN FLOOR((SYSDATE-BOARD_WRITE_DATE) * 24) || '시간 전'
            
            ELSE TO_CHAR(BOARD_WRITE_DATE, 'YYYY-MM-DD')
            
         END BOARD_WRITE_DATE
         ]]>
      
      FROM (SELECT BOARD_NO, BOARD_WRITE_DATE, ITEM_NO, MEMBER_NO, READ_COUNT, BOARD_TITLE, BOARD_CONTENT, BOARD_DEL_FL, LIKE_COUNT, BOARD_UPDATE_DATE
	FROM BOARD WHERE BOARD_DEL_FL = 'N' ORDER BY BOARD_NO) B
      JOIN "MEMBER" USING(MEMBER_NO)
      WHERE BOARD_DEL_FL = 'N' AND MEMBER_ID = #{memberId}
      ORDER BY ROWNUM DESC
 
 </select>
 
 <select id="getMyCommentLists">
 	
SELECT 
    B.BOARD_TITLE,
    TO_CHAR(C.COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일"') AS COMMENT_WRITE_DATE,
    C.COMMENT_CONTENT,
  	B.BOARD_NO
FROM 
    "BOARD" B
JOIN 
    "COMMENT" C ON B.BOARD_NO = C.BOARD_NO
WHERE 
    C.MEMBER_NO = ${memberNo}
    AND C.COMMENT_DEL_FL = 'N'
    AND B.BOARD_DEL_FL = 'N'
ORDER BY 
    C.COMMENT_WRITE_DATE DESC
 
 </select>
   
   
    <!-- 게시물 업로드 횟수-->
    <select id="boardCount">
	  	SELECT COUNT(*)
		FROM "BOARD"
		WHERE MEMBER_NO= #{memberNo}
  	</select>
  	
	<!-- 첫 게시물 작성 시 2번 뱃지 수여-->
	<update id="updateFirstBoardBadge" parameterType="int">
	    UPDATE "MEMBER_BADGE" SET
	    BADGE_FL = 'Y'
	    WHERE MEMBER_NO = #{memberNo} 
	    AND BADGE_NO = 2
	</update>
	
	<!-- 50개 게시물 작성 시 3번 뱃지 수여-->
	<update id="updateBoardBadge" parameterType="int">
	    UPDATE "MEMBER_BADGE" SET
	    BADGE_FL = 'Y'
	    WHERE MEMBER_NO = #{memberNo} 
	    AND BADGE_NO = 3
	</update>
	
	<!-- 1개 좋아요 획득 시 4번 뱃지 수여-->
	<update id="updateFirstLikeCountBadge" parameterType="int">
	    UPDATE MEMBER_BADGE SET
	    BADGE_FL = 'Y'
	    WHERE MEMBER_NO = #{memberNo} 
	    AND BADGE_NO = 4
	</update>
	
	<!-- 100개 좋아요 획득 시 5번 뱃지 수여-->
	<update id="update100LikeCountBadge" >
	    UPDATE MEMBER_BADGE SET
	    BADGE_FL = 'Y'
	    WHERE MEMBER_NO = #{memberNo} 
	    AND BADGE_NO = 5
	</update>
	
	<!-- 조회수 100회 시 6번 뱃지 수여-->
	<update id="update100ReadCountBadge" >
	    UPDATE MEMBER_BADGE SET
	    BADGE_FL = 'Y'
	    WHERE MEMBER_NO = (SELECT MEMBER_NO 
						    FROM BOARD 
						    WHERE BOARD_NO = #{boardNo})
	    AND BADGE_NO = 6
	</update>
	
	<!-- 조회수 300회 시 7번 뱃지 수여-->
	<update id="update300ReadCountBadge" >
	    UPDATE MEMBER_BADGE SET
	    BADGE_FL = 'Y'
	    WHERE MEMBER_NO = (SELECT MEMBER_NO 
						    FROM BOARD 
						    WHERE BOARD_NO = #{boardNo})
	    AND BADGE_NO = 7
	</update>
	
	
	

</mapper>
